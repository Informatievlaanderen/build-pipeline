name: Build lambda

on:
  workflow_call:
    inputs:
      lambda-name: #lambda-backoffice
        required: true
        type: string
      test-project: #StreetNameRegistry.Tests
        required: false
        type: string
      build-project: #StreetNameRegistry.Api.BackOffice.Handlers.Lambda
        required: true
        type: string
      semver:
        required: true
        type: string
      runtime:
        required: false
        type: string
      dotnet-version:
        required: false
        type: string

jobs:
  build-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ inputs.semver }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Paket
        uses: actions/cache@v4
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version || secrets.VBR_DOTNET_VERSION }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Paket install
        shell: bash
        run: dotnet paket install

      - name: Paket restore
        shell: bash
        run: dotnet paket restore

      - name: Dotnet restore tests
        if: ${{ inputs.test-project != '' && inputs.test-project != 'none' }}
        shell: bash
        run: dotnet restore test/${{ inputs.test-project }} --runtime $RUNTIME
        env:
          RUNTIME: ${{ inputs.runtime || 'linux-x64' }}

      - name: Dotnet build tests
        if: ${{ inputs.test-project != '' && inputs.test-project != 'none' }}
        shell: bash
        run: dotnet build --no-restore --runtime $RUNTIME --self-contained test/${{ inputs.test-project }}
        env:
          RUNTIME: ${{ inputs.runtime || 'linux-x64' }}

      - name: Run all tests
        if: ${{ inputs.test-project != '' && inputs.test-project != 'none' }}
        run: dotnet test test/${{ inputs.test-project }}

      - name: Dotnet restore
        shell: bash
        run: dotnet restore src/${{ inputs.build-project }} --runtime $RUNTIME
        env:
          RUNTIME: ${{ inputs.runtime || 'linux-x64' }}

      - name: Dotnet build
        shell: bash
        run: dotnet build --no-restore --runtime $RUNTIME -c Release --self-contained src/${{ inputs.build-project }}
        env:
          RUNTIME: ${{ inputs.runtime || 'linux-x64' }}

      - name: Dotnet publish
        shell: bash
        run: dotnet publish -o dist/${{ inputs.build-project }}/linux --no-build --no-restore -c Release --runtime $RUNTIME -p:PublishReadyToRun=true src/${{ inputs.build-project }}
        env:
          RUNTIME: ${{ inputs.runtime || 'linux-x64' }}

      - name: Package Lambda functions
        if: env.RELEASE_VERSION != 'none'
        shell: bash
        run: |
          echo Zip lambda functions
          pushd dist/${{ inputs.build-project }}/linux
          echo zip -r lambda.zip .
          zip -r lambda.zip .
          popd

      - name: Upload Lambda
        if: inputs.semver != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.lambda-name }}-${{ inputs.semver }}
          path: dist/${{ inputs.build-project }}/linux/lambda.zip

      # - name: Shows logs ACM container
      #   if: ${{ failure() }}
      #   shell: bash
      #   run: |
      #     docker logs acm

      # - name: Shows logs elasticsearch container
      #   if: ${{ failure() }}
      #   shell: bash
      #   run: |
      #     docker logs elasticsearch

      # - name: Shows logs db container
      #   if: ${{ failure() }}
      #   shell: bash
      #   run: |
      #     docker logs db

      # - name: Shows logs minio container
      #   if: ${{ failure() }}
      #   shell: bash
      #   run: |
      #     docker logs minio
